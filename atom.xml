<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tumi&#39;s blog</title>
  <subtitle>work for better games</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tumi.tech/"/>
  <updated>2017-01-19T07:39:16.150Z</updated>
  <id>http://tumi.tech/</id>
  
  <author>
    <name>Charles Tumi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sublime 文档信息插件开发</title>
    <link href="http://tumi.tech/2017/01/19/sublime-prefix-plugin/"/>
    <id>http://tumi.tech/2017/01/19/sublime-prefix-plugin/</id>
    <published>2017-01-19T07:28:19.000Z</published>
    <updated>2017-01-19T07:39:16.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-序"><a href="#0-序" class="headerlink" title="0. 序"></a>0. 序</h2><p>Sublime Text 3是一款极具扩展性的文本编辑器，这次我们通过官网提供的API，实现了一个快速插入时间、作者和描述信息的插件。</p>
<h2 id="1-创建插件"><a href="#1-创建插件" class="headerlink" title="1. 创建插件"></a>1. 创建插件</h2><p>在Sublime中选择<code>Tools -&gt; Developer -&gt; New Plugin</code>，编写相应Python代码（详见下文），保存到<code>Sublime Text 3/Packages/prefix/prefix.py</code>。</p>
<h2 id="2-主体代码"><a href="#2-主体代码" class="headerlink" title="2. 主体代码"></a>2. 主体代码</h2><p>目前的插件支持根据当前文档的语法（C++, Python, Lua）在光标位置添加作者，时间，描述等信息。代码如下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sublime</div><div class="line"><span class="keyword">import</span> sublime_plugin</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrefixCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></div><div class="line">		curSyntax = self.view.settings().get(<span class="string">'syntax'</span>)</div><div class="line">		dt = datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d"</span>)</div><div class="line">		prefix = <span class="string">''</span></div><div class="line">		<span class="keyword">if</span> <span class="string">'Lua'</span> <span class="keyword">in</span> curSyntax:</div><div class="line">			prefix = prefix + <span class="string">'-------------------------\n'</span></div><div class="line">			prefix = prefix + <span class="string">'-- author: tumi\n'</span></div><div class="line">			prefix = prefix + <span class="string">'-- date:   '</span> + dt + <span class="string">'\n'</span></div><div class="line">			prefix = prefix + <span class="string">'-- desc:   \n'</span></div><div class="line">			prefix = prefix + <span class="string">'-------------------------\n'</span></div><div class="line">		<span class="keyword">elif</span> <span class="string">'Python'</span> <span class="keyword">in</span> curSyntax:</div><div class="line">			prefix = prefix + <span class="string">'#########################\n'</span></div><div class="line">			prefix = prefix + <span class="string">'## author: tumi\n'</span></div><div class="line">			prefix = prefix + <span class="string">'## date:   '</span> + dt + <span class="string">'\n'</span></div><div class="line">			prefix = prefix + <span class="string">'## desc:   \n'</span></div><div class="line">			prefix = prefix + <span class="string">'#########################\n'</span></div><div class="line">		<span class="keyword">elif</span> <span class="string">'C++'</span> <span class="keyword">in</span> curSyntax:</div><div class="line">			prefix = <span class="string">'/**\n  * @author #tumi\n  * @date   #'</span> + dt + <span class="string">'\n  * @desc   #des\n  */'</span></div><div class="line">		<span class="keyword">if</span> prefix != <span class="string">''</span>:</div><div class="line">			self.view.insert(edit, self.view.sel()[<span class="number">0</span>].begin(), prefix)</div></pre></td></tr></table></figure>
<h2 id="3-快捷键设置"><a href="#3-快捷键设置" class="headerlink" title="3. 快捷键设置"></a>3. 快捷键设置</h2><p>在Sublime偏好设置的Key Bindings中添加如下配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;command&quot;: &quot;prefix&quot;,</div><div class="line">	&quot;keys&quot;: [&quot;ctrl+shift+.&quot;]</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-序&quot;&gt;&lt;a href=&quot;#0-序&quot; class=&quot;headerlink&quot; title=&quot;0. 序&quot;&gt;&lt;/a&gt;0. 序&lt;/h2&gt;&lt;p&gt;Sublime Text 3是一款极具扩展性的文本编辑器，这次我们通过官网提供的API，实现了一个快速插入时间、作者和描述信息的
    
    </summary>
    
    
      <category term="sublime" scheme="http://tumi.tech/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>安卓输入法快捷切换</title>
    <link href="http://tumi.tech/2017/01/10/android-input-quick-switch/"/>
    <id>http://tumi.tech/2017/01/10/android-input-quick-switch/</id>
    <published>2017-01-10T06:45:35.000Z</published>
    <updated>2017-01-10T08:00:53.184Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参考资料：<br><a href="http://stackoverflow.com/questions/15976837/calling-inputmethodmanager-setinputmethodibinder-token-string-id-outside-the/17084916" target="_blank" rel="external">http://stackoverflow.com/questions/15976837/calling-inputmethodmanager-setinputmethodibinder-token-string-id-outside-the/17084916</a><br><a href="http://blog.csdn.net/tongcpp/article/details/40344871" target="_blank" rel="external">http://blog.csdn.net/tongcpp/article/details/40344871</a></p>
</blockquote>
<h2 id="0-序"><a href="#0-序" class="headerlink" title="0. 序"></a>0. 序</h2><p>前段时间女朋友想换个OPPO R9S Plus，我觉得性价比太差，还不如多加点直接换个7，但去实体店体验了下感觉还不错，加上最近手头并不宽裕，索性就入手OPPO了。</p>
<p>之后与6s的拍照实力做了个对比（夜间室内），6s在它面前简直就像山寨机拍出来的，性能完爆。且续航能力惊人，毕竟是4000mA的大容量电池，这样看来买的值了。</p>
<p>下面进入正题，由于女朋友有时需要用日文输入法，而OPPO能用的就只有Google日文输入法这个app，但是这个app不能打中文，且面板上没有切换到其他输入法的入口。而OPPO的系统做的比较简洁，没有像HTC系统可以在桌面添加设置的快捷方式，于是只能自己动手了。</p>
<h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h2><h3 id="1-功能"><a href="#1-功能" class="headerlink" title="1. 功能"></a>1. 功能</h3><p>目的是切换输入法，这肯定有API可以直接用，起初看到的方法有三种：</p>
<ol>
<li>使用<code>InputMethodManager.setInputMethod(IBinder token, String id)</code>，但是第一个参数比较难获取，有人说用activeActivity.getCurrentFocus().getToken()，但还没试；</li>
<li>使用<code>InputMethodService.switchInputMethod(String id)</code>，但是获取实例又比较难。</li>
<li>使用<code>Settings.Secure.putString(MainActivity.this.getContentResolver(),Settings.Secure.DEFAULT_INPUT_METHOD, s)</code>写入系统设置，但是难在将app设置为system权限。</li>
</ol>
<p>以上都是在百度中找到的方法，之后一段时间自己也在努力解决其中的难点，这些网上也有很多人讨论但并没有看到合适的解决方法。之后Google了一下最终在<a href="http://stackoverflow.com/questions/15976837/calling-inputmethodmanager-setinputmethodibinder-token-string-id-outside-the/17084916" target="_blank" rel="external">Stack Overflow</a>上看到另一种思路：调出系统的切换输入法的面板，而不是像之前一样直接切换。这样难度下降了很多，但并不影响体验。</p>
<h3 id="2-体验"><a href="#2-体验" class="headerlink" title="2. 体验"></a>2. 体验</h3><p>实现最简单同时体验上也相对比较友好的方案是，每次打开app或者切到前台时弹出输入法切换面板。</p>
<h2 id="2-编码"><a href="#2-编码" class="headerlink" title="2. 编码"></a>2. 编码</h2><p>有了合适的API和用户交互方式，剩下的工作就比较简单了，直接上代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		<span class="keyword">this</span>.getApplication().registerActivityLifecycleCallbacks(<span class="keyword">new</span> ActivityLifecycleCallbacks() &#123;  </div><div class="line">   </div><div class="line">    	<span class="meta">@Override</span>  </div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStopped</span><span class="params">(Activity activity)</span> </span>&#123;  </div><div class="line">        	Logger.v(activity, <span class="string">"onActivityStopped"</span>);  </div><div class="line">    	&#125;  </div><div class="line">   </div><div class="line">    	<span class="meta">@Override</span>  </div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStarted</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        	Logger.v(activity, <span class="string">"onActivityStarted"</span>);  </div><div class="line">	        showIME(activity);</div><div class="line">    	&#125;  </div><div class="line">   </div><div class="line">    	<span class="meta">@Override</span>  </div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivitySaveInstanceState</span><span class="params">(Activity activity, Bundle outState)</span> </span>&#123;  </div><div class="line">	        Logger.v(activity, <span class="string">"onActivitySaveInstanceState"</span>);  </div><div class="line">    	&#125;  </div><div class="line">   </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResumed</span><span class="params">(Activity activity)</span> </span>&#123;  </div><div class="line">        	Logger.v(activity, <span class="string">"onActivityResumed"</span>); </div><div class="line">        	showIME(activity);</div><div class="line">  	  &#125;  </div><div class="line">   </div><div class="line">    	<span class="meta">@Override</span>  </div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPaused</span><span class="params">(Activity activity)</span> </span>&#123;  </div><div class="line">      	  Logger.v(activity, <span class="string">"onActivityPaused"</span>);  </div><div class="line">  	  &#125;  </div><div class="line">   </div><div class="line">    	<span class="meta">@Override</span>  </div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(Activity activity)</span> </span>&#123;  </div><div class="line">        	Logger.v(activity, <span class="string">"onActivityDestroyed"</span>);  </div><div class="line">    	&#125;  </div><div class="line">   </div><div class="line">    	<span class="meta">@Override</span>  </div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        	Logger.v(activity, <span class="string">"onActivityCreated"</span>);  </div><div class="line">    	&#125;  </div><div class="line">  		&#125;);    	</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title">showIME</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">     	InputMethodManager imm = (InputMethodManager)</div><div class="line">                activity.getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class="line">        imm.showInputMethodPicker();</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/15976837/calling-inputmethodmanager-setinputmethodibinder-token-string-
    
    </summary>
    
    
      <category term="Android" scheme="http://tumi.tech/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hexo TOC 优化</title>
    <link href="http://tumi.tech/2016/10/26/hexo-toc-optimize/"/>
    <id>http://tumi.tech/2016/10/26/hexo-toc-optimize/</id>
    <published>2016-10-26T02:47:37.000Z</published>
    <updated>2016-10-26T08:38:05.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参考资料：<a href="http://blog.csdn.net/peihaozhu/article/details/50755098" target="_blank" rel="external">http://blog.csdn.net/peihaozhu/article/details/50755098</a></p>
</blockquote>
<h2 id="0-序"><a href="#0-序" class="headerlink" title="0. 序"></a>0. 序</h2><p>之前发博客时目录就没处理好，因为Hexo的Iceman主题下Markdown的TOC标签未能识别，而当使用恰当标签时（<code>#</code>文章中只有一个），Hexo又能够为我自动生成目录，但该目录带有自动编号，与我自己的标题编号不一致又连在一起，看上去很不爽，所以当时就没用。</p>
<p>今天找到了<a href="http://blog.csdn.net/peihaozhu/article/details/50755098" target="_blank" rel="external">参考资料</a>这篇文章，在Iceman主题下的<code>/layout/_partial/post/article.ejs</code>中的div设置中增加一个参数<code>{list_number:false}</code>即可。此外还可以进一步对toc的布局优化美观，详见参考文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;http://blog.csdn.net/peihaozhu/article/details/50755098&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/p
    
    </summary>
    
    
      <category term="web" scheme="http://tumi.tech/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Lua中的泛型迭代器</title>
    <link href="http://tumi.tech/2016/10/26/iterator-in-lua/"/>
    <id>http://tumi.tech/2016/10/26/iterator-in-lua/</id>
    <published>2016-10-26T01:37:37.000Z</published>
    <updated>2016-10-26T03:40:18.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-序"><a href="#0-序" class="headerlink" title="0. 序"></a>0. 序</h2><p>昨天同事碰到一个问题，因为游戏中进战斗要销毁一些窗口，他写了一对Reg/UnReg方法，在窗口创建和销毁时分别执行，在进入战斗时主控制程序只要遍历表中存的对象，并执行其EnterBattle()方法即可，这样写很好地做到了主程序与各个窗口实例之间的解耦。但是当有两个窗口要销毁时，却发现只能销毁一个。</p>
<p>看到这个问题我立刻想到了C++的容器操作方法都会返回一个指向操作后容器end()的迭代器对象，因为操作会改变容器的结构，使原有的迭代器失效。</p>
<h2 id="1-涉及的几个Lua方法"><a href="#1-涉及的几个Lua方法" class="headerlink" title="1. 涉及的几个Lua方法"></a>1. 涉及的几个Lua方法</h2><h3 id="1-pairs-table"><a href="#1-pairs-table" class="headerlink" title="1. pairs(table)"></a>1. pairs(table)</h3><p>pairs(有序有状态)会返回三个值，分别是迭代方法next,表t,和nil，而泛型for使用的便是前两个参数，这种遍历只适合于不更改表结构的情况。</p>
<h3 id="2-table-insert-table-pos-value"><a href="#2-table-insert-table-pos-value" class="headerlink" title="2. table.insert(table, pos, value)"></a>2. table.insert(table, pos, value)</h3><p>默认的pos是n+1，如果指定了其他值，会移动pos右面的元素来为插入元素腾出空间。</p>
<h3 id="3-table-remove-table-pos"><a href="#3-table-remove-table-pos" class="headerlink" title="3. table.remove(table, pos)"></a>3. table.remove(table, pos)</h3><p>在进战斗销毁窗口的例子中，遍历中会对被遍历的表执行table.remove()方法，该方法如果被删除的元素处于表头，会把表尾的元素向前移动，而一旦表结构更改后，原来的迭代器就失效了。</p>
<h3 id="4-for-in-do-end"><a href="#4-for-in-do-end" class="headerlink" title="4. for  in   do   end"></a>4. for <var-list> in <exp-list>  do  <body> end</body></exp-list></var-list></h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-序&quot;&gt;&lt;a href=&quot;#0-序&quot; class=&quot;headerlink&quot; title=&quot;0. 序&quot;&gt;&lt;/a&gt;0. 序&lt;/h2&gt;&lt;p&gt;昨天同事碰到一个问题，因为游戏中进战斗要销毁一些窗口，他写了一对Reg/UnReg方法，在窗口创建和销毁时分别执行，在进入战斗时
    
    </summary>
    
    
      <category term="Lua" scheme="http://tumi.tech/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua中处理含中文的UTF-8字符串</title>
    <link href="http://tumi.tech/2016/10/25/get-char-from-uft8string/"/>
    <id>http://tumi.tech/2016/10/25/get-char-from-uft8string/</id>
    <published>2016-10-25T10:29:28.000Z</published>
    <updated>2016-12-09T03:25:56.019Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参考资料：<br><a href="http://blog.csdn.net/zhang429350061/article/details/41825521" target="_blank" rel="external">http://blog.csdn.net/zhang429350061/article/details/41825521</a><br><a href="http://www.cnblogs.com/atong/p/3366682.html" target="_blank" rel="external">http://www.cnblogs.com/atong/p/3366682.html</a></p>
</blockquote>
<h2 id="0-序"><a href="#0-序" class="headerlink" title="0. 序"></a>0. 序</h2><p>最近做功能时有一个需求，界面要用一个控件显示文本，内容是服务器发来的，是玩家的留言，而该控件只是一个预览，因此最大长度有限制，若超出限制则在最后以”…”结尾。  </p>
<p>起初文本控件用的是StaticText，但是翻了下CEGUI文档，这个控件太弱了，就只有defaultWindow的基本功能，后来换到RichEditBox，基准实现中是有描述绘制的文本矩形的宽高的变量的，这样就可以把文本内容的字数和屏幕显示联系起来了。那么问题来了，如何对字符串进行分割呢？  </p>
<p>RichEditBox的第一个参数是用一个合法的UTF8字符串作为参数调用CEGUI.String的构造函数，参数的合法性必须由程序员来保证，起初想通过Lua的pcall方法来捕获异常，但遗憾的改构造函数是C++的，Lua已经无能为力了，因此必须对字符串进行合理分割，于是有了本文。</p>
<h2 id="1-UTF8编码结构"><a href="#1-UTF8编码结构" class="headerlink" title="1. UTF8编码结构"></a>1. UTF8编码结构</h2><p>UTF-8的编码规则很简单，只有二条：</p>
<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>
<p>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
<p>下表总结了编码规则，字母x表示可用编码的位。</p>
<table>
<thead>
<tr>
<th>Unicode符号范围（十六进制）</th>
<th>UTF-8编码方式（二进制）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0000 0000-0000 007F</td>
<td>0xxxxxxx</td>
</tr>
<tr>
<td>0000 0080-0000 07FF</td>
<td>110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>0000 0800-0000 FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>0001 0000-0010 FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>
<p>此外，有一个概念很重要，即UTF-8是单字节码，多字节存储，而非多字节码。这个概念告诉我们它是大小端无关的！这也保证了其在各平台的通用性。</p>
<h2 id="2-UTF-8字符串截取算法"><a href="#2-UTF-8字符串截取算法" class="headerlink" title="2. UTF-8字符串截取算法"></a>2. UTF-8字符串截取算法</h2><p>该算法是从参考文献1看到的，先上代码。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubUTF8String</span><span class="params">(s,n)</span></span></div><div class="line">    <span class="keyword">local</span> dropping = <span class="built_in">string</span>.byte(s, n + <span class="number">1</span>)   <span class="comment">-- 若当截取长度下一位字符是正常字符(&lt;128)或是多字节字符的开始(&gt;192)的话，</span></div><div class="line">                                             <span class="comment">-- 或是有效字符串的最后一个字符，则直接返回该长度的字符串</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> dropping <span class="keyword">then</span> <span class="keyword">return</span> s <span class="keyword">end</span>        <span class="comment">-- 字符串结尾的情况返回</span></div><div class="line">    <span class="keyword">if</span> dropping &gt;= <span class="number">128</span> <span class="keyword">and</span> dropping &lt; <span class="number">192</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> SubUTF8String(s, n - <span class="number">1</span>)       <span class="comment">-- 若不是正常字符也不是多字节码的开始则向前探测</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.sub(s, <span class="number">1</span>, n)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>首先该方法也要求我们的输入必须是有效的UTF8字符串（在我们的项目中这是自然满足的），第二个参数n是要截取的长度（字节长度）。</p>
<p>在了解了UTF-8的结构后，对128和192这两个数字就不难理解了。若上面的if语句条件满足，则说明该字节所表示的字符是UTF-8中间的某个字节，需要向前探测。</p>
<p>这个算法的好在于它是一个正确的尾调用（Tail return），虽然其样子与递归十分相似，但它不是递归的。尾调用的英文名称很好的描述了其特征，即对另一个函数的调用是紧跟在return后面的。就我目前的理解来看，尾调用的效率是介于递归和loop之间的，递归的开销主要在维护栈状态和函数调用开销，而尾调用避免了前者，无须担心栈溢出。</p>
<h2 id="3-从UTF-8字符串得到全部有效字符"><a href="#3-从UTF-8字符串得到全部有效字符" class="headerlink" title="3. 从UTF_8字符串得到全部有效字符"></a>3. 从UTF_8字符串得到全部有效字符</h2><p>该算法在上述截取算法的基础上，把字符串中的全部字符分别拿出存到表中，表长即可显字符的个数。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetValidChar</span><span class="params">(str)</span></span></div><div class="line">    <span class="keyword">local</span> chars = &#123;&#125;</div><div class="line">    <span class="keyword">local</span> count = <span class="number">0</span></div><div class="line">    <span class="keyword">local</span> i = <span class="number">1</span></div><div class="line">    <span class="keyword">local</span> j = <span class="number">1</span></div><div class="line">    <span class="keyword">local</span> strlen = <span class="built_in">string</span>.len(str)</div><div class="line">    <span class="keyword">local</span> curlen = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> j &lt;= strlne <span class="keyword">do</span></div><div class="line">        <span class="keyword">local</span> tmplen = <span class="built_in">string</span>.len(SubUTF8String(str, j))</div><div class="line">        <span class="keyword">if</span> tmplen ~= curlen <span class="keyword">then</span></div><div class="line">            count = count + <span class="number">1</span></div><div class="line">            chars[count] = <span class="built_in">string</span>.sub(str, i, j)</div><div class="line">            i = j + <span class="number">1</span></div><div class="line">            j = i</div><div class="line">        <span class="keyword">else</span></div><div class="line">            j = j + <span class="number">1</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> chars</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>该方法通过以一个字节为步长不断尝试增加当前测试字符串的长度，判断是否可以取到更长的有效UTF-8子串，若能则把最近探测的1个或几个字节（[i,j]）作为一个有效字符输出到表中。</p>
<hr>
<h2 id="4-后续更新-–-优化的求UTF8有效字符和长度求取"><a href="#4-后续更新-–-优化的求UTF8有效字符和长度求取" class="headerlink" title="4. 后续更新 – 优化的求UTF8有效字符和长度求取"></a>4. 后续更新 – 优化的求UTF8有效字符和长度求取</h2><p><em>update_on_161209</em></p>
<p>因有同事用我上面的方法来求UTF8有效字符个数，而那又是一个计算密集型的功能，性能弊端由此明显暴露出来，加之本来就是一个单独的功能，却用两个方法来实现，确实很蹩脚。下面的代码通过朴素遍历取得有效字符。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUTF8Chars</span><span class="params">(str)</span></span></div><div class="line"> 	<span class="keyword">local</span> bytenlen = <span class="built_in">string</span>.len(str)</div><div class="line">  	<span class="keyword">if</span> bytelen == <span class="number">0</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">""</span> <span class="keyword">end</span></div><div class="line">  	<span class="keyword">local</span> chars = &#123;&#125;</div><div class="line">  	<span class="keyword">local</span> dropping, i, count = <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></div><div class="line">  	<span class="keyword">while</span>(i &lt;= bytelen) <span class="keyword">do</span></div><div class="line">    	dropping = <span class="built_in">string</span>.byte(str, i)</div><div class="line">    	<span class="keyword">if</span> dropping &gt;= <span class="number">240</span> <span class="keyword">then</span></div><div class="line">      		chars[count] = <span class="built_in">string</span>.sub(str, i, i+<span class="number">3</span>)</div><div class="line">      		i = i + <span class="number">4</span></div><div class="line">      	<span class="keyword">elseif</span> dropping &gt;= <span class="number">224</span> <span class="keyword">then</span></div><div class="line">      		chars[count] = <span class="built_in">string</span>.sub(str, i, i+<span class="number">2</span>)</div><div class="line">      		i = i + <span class="number">3</span></div><div class="line">      	<span class="keyword">elseif</span> dropping &gt;= <span class="number">192</span> <span class="keyword">then</span></div><div class="line">      		chars[count] = <span class="built_in">string</span>.sub(str, i, i+<span class="number">1</span>)</div><div class="line">      		i = i + <span class="number">2</span></div><div class="line">      	<span class="keyword">else</span></div><div class="line">      		chars[count] = <span class="built_in">string</span>.sub(str, i, i)</div><div class="line">      	<span class="keyword">end</span></div><div class="line">    	count = count + <span class="number">1</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  	<span class="keyword">return</span> chars</div><div class="line"> <span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>如果只要求得字符个数，那么就无须创建一个表来存字符，直接返回count就好了。相同的功能实现，与上一版本比较有60%的性能提升！</p>
<h2 id="5-C语言的求法"><a href="#5-C语言的求法" class="headerlink" title="5. C语言的求法"></a>5. C语言的求法</h2><p>C到底还是简洁高效，只要两行代码就可搞定！</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// count all first bytes(the ones don't match 10xxxxxx)</span></div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (*s) len += (*s++ &amp; <span class="number">0xc0</span>) != <span class="number">0x80</span>;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/zhang429350061/article/details/41825521&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.c
    
    </summary>
    
    
      <category term="Lua" scheme="http://tumi.tech/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>looknfeel简介</title>
    <link href="http://tumi.tech/2016/09/09/introduction-of-looknfeel/"/>
    <id>http://tumi.tech/2016/09/09/introduction-of-looknfeel/</id>
    <published>2016-09-09T05:37:45.000Z</published>
    <updated>2016-09-09T06:27:28.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参考资料：<a href="http://static.cegui.org.uk/docs/0.7.1/fal_tut1.html" target="_blank" rel="external">http://static.cegui.org.uk/docs/0.7.1/fal_tut1.html</a></p>
</blockquote>
<p>因最近处理一个控件缩放时出了问题，一路从layout看到looknfeel，正好趁此机会了解其机制。</p>
<h1 id="1-标签"><a href="#1-标签" class="headerlink" title="1. 标签"></a>1. 标签</h1><p>looknfeel遵循xml，举一个最简单的示例如下：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version = "1.0" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Falagard</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">WidgetLook</span> <span class="attr">name</span> = <span class="string">"TaharezLook/Button"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ImagerySection</span> <span class="attr">name</span> = <span class="string">"normal_imagery"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ImageryComponent</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Area</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span> = <span class="string">"LeftEdge"</span>&gt;</span><span class="tag">&lt;<span class="name">AbsoluteDim</span> <span class="attr">value</span>= <span class="string">"0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span> = <span class="string">"TopEdge"</span>&gt;</span><span class="tag">&lt;<span class="name">AbsoluteDim</span> <span class="attr">value</span> = <span class="string">"0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span> = <span class="string">"Width"</span>&gt;</span><span class="tag">&lt;<span class="name">UnifiedDim</span> <span class="attr">scale</span> = <span class="string">"1.0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span> = <span class="string">"Height"</span>&gt;</span><span class="tag">&lt;<span class="name">UnifiedDim</span> <span class="attr">scale</span> = <span class="string">"1.0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">Area</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Image</span> <span class="attr">imageset</span> = <span class="string">"TaharezLook"</span> <span class="attr">image</span> = <span class="string">"ButtonNormal"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">VertFormat</span> <span class="attr">type</span> = <span class="string">"Stretched"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">ImageryComponent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ImagerySection</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ImagerySection</span> <span class="attr">name</span> = <span class="string">"label"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">TextComponent</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Area</span>&gt;</span></div><div class="line"></div><div class="line">				<span class="tag">&lt;/<span class="name">Area</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">TextComponent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ImagerySection</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">StateImagery</span> <span class="attr">name</span> = <span class="string">"Normal"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">Layer</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Section</span> <span class="attr">section</span> = <span class="string">"normal_imagery"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Section</span> <span class="attr">section</span> = <span class="string">"label"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">Layer</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">StateImagery</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">WidgetLook</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Falagard</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从上面的示例可以看出大概的层级结构，文件定义了一个Button，两种结构（或者说控件，但不太恰当）和一种状态，并使这种状态包含了这两种结构。<br>对于”normal_imgery”这种结构，需要指出他的区域Area，图片和对齐方式。整个looknfeel最有趣的部分在于Area的设置，即坐标的指定。</p>
<h1 id="2-坐标系统"><a href="#2-坐标系统" class="headerlink" title="2. 坐标系统"></a>2. 坐标系统</h1><p>一个控件区域的指定通过两种要素完成，一是坐标类型 Dim type：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"LeftEdge", "TopEdge", "RightEdge", "BottomEdge", "Width", "Height"</div></pre></td></tr></table></figure>
<p>二是坐标数值：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"AbsoluteDim", "UnifiedDim", "ImageDim"</div></pre></td></tr></table></figure>
<p>此外，还可以通过<strong>算术操作符</strong>指定两个坐标值的算术操作结果，甚至完成嵌套的复杂计算，但是其计算优先级只能是innermost，即由内至外进行计算。下面用官方文档中的一个示例来演示： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span>=<span class="string">"RightEdge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">UnifiedDim</span> <span class="attr">scale</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"Width"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">DimOperator</span> <span class="attr">op</span>=<span class="string">"Subtract"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ImageDim</span></span></div><div class="line">				<span class="attr">imageset</span>=<span class="string">"TaharezLook"</span> <span class="attr">image</span>=<span class="string">"ButtonRightNormal"</span> <span class="attr">dimension</span>=<span class="string">"Width"</span></div><div class="line">			/&gt;</div><div class="line">		<span class="tag">&lt;/<span class="name">DimOperator</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">UnifiedDim</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该例的功能是在已经为一个大控件设置了左右两个button后，再把第三个button填补到两个按钮中间的空白区域，其LeftEdge的设置可直接使用leftButton的rightEdge，即Width,而该middleButton的rightEdge设置就需要计算出来了。计算的两个操作数分别是整个大空间的Width和rightButton的Width。</p>
<h1 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h1><p>虽说是把looknfeel的运作原理大概看了下，但其实在实际工作中，尤其是对于已经开发成型的游戏，改动它的可能性太小，所以下一步应补充了解对应的C++代码是如何与其协作的，或者说C++代码是如何利用这些配置文件来达到对控件的更灵活的控制的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;http://static.cegui.org.uk/docs/0.7.1/fal_tut1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://static.cegui.org.uk
    
    </summary>
    
    
      <category term="CEGUI" scheme="http://tumi.tech/tags/CEGUI/"/>
    
  </entry>
  
  <entry>
    <title>Say Hexo</title>
    <link href="http://tumi.tech/2016/07/26/sayhello/"/>
    <id>http://tumi.tech/2016/07/26/sayhello/</id>
    <published>2016-07-26T01:10:41.000Z</published>
    <updated>2016-07-26T02:17:58.267Z</updated>
    
    <content type="html"><![CDATA[<p>经过一番折腾，终于在Hexo安家了。总的来说，它的配置和使用比Octopress要方便一些，且目前来讲Nodejs应该比Ruby圈子更火一些吧，虽然这两个都不会用哈哈。  </p>
<p>目前来看博客系统很强大，主题丰富，对md的支持也使得版式可控性强，但还要考虑图床的问题，不过暂时还用不到，到时再说。</p>
<p>OK, Stay calm and carry on.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一番折腾，终于在Hexo安家了。总的来说，它的配置和使用比Octopress要方便一些，且目前来讲Nodejs应该比Ruby圈子更火一些吧，虽然这两个都不会用哈哈。  &lt;/p&gt;
&lt;p&gt;目前来看博客系统很强大，主题丰富，对md的支持也使得版式可控性强，但还要考虑图床的问题
    
    </summary>
    
    
      <category term="Others" scheme="http://tumi.tech/tags/Others/"/>
    
  </entry>
  
</feed>
