<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tumi&#39;s blog</title>
  <subtitle>work for better games</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tumi.tech/"/>
  <updated>2016-10-25T11:16:11.640Z</updated>
  <id>http://tumi.tech/</id>
  
  <author>
    <name>Charles Tumi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>get_char_from_uft8string</title>
    <link href="http://tumi.tech/2016/10/25/get-char-from-uft8string/"/>
    <id>http://tumi.tech/2016/10/25/get-char-from-uft8string/</id>
    <published>2016-10-25T10:29:28.000Z</published>
    <updated>2016-10-25T11:16:11.640Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参考资料：<br><a href="http://blog.csdn.net/zhang429350061/article/details/41825521" target="_blank" rel="external">http://blog.csdn.net/zhang429350061/article/details/41825521</a><br><a href="http://www.cnblogs.com/atong/p/3366682.html" target="_blank" rel="external">http://www.cnblogs.com/atong/p/3366682.html</a></p>
</blockquote>
<p>最近做功能时有一个需求，界面要用一个控件显示文本，内容是服务器发来的，是玩家的留言，而该控件只是一个预览，因此最大长度有限制，若超出限制则在最后以”…”结尾。  </p>
<p>起初文本控件用的是StaticText，但是翻了下CEGUI文档，这个控件太弱了，就只有defaultWindow的基本功能，后来换到RichEditBox，基准实现中是有描述绘制的文本矩形的宽高的变量的，这样就可以把文本内容的字数和屏幕显示联系起来了。那么问题来了，如何对字符串进行分割呢？  </p>
<p>RichEditBox的第一个参数是用一个合法的UTF8字符串作为参数调用CEGUI.String的构造函数，参数的合法性必须由程序员来保证，起初想通过Lua的pcall方法来捕获异常，但遗憾的改构造函数是C++的，Lua已经无能为力了，因此必须对字符串进行合理分割，于是有了本文。</p>
<h1 id="1-UTF8编码结构"><a href="#1-UTF8编码结构" class="headerlink" title="1. UTF8编码结构"></a>1. UTF8编码结构</h1><p>UTF-8的编码规则很简单，只有二条：</p>
<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>
<p>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
<p>下表总结了编码规则，字母x表示可用编码的位。</p>
<table>
<thead>
<tr>
<th>Unicode符号范围（十六进制）</th>
<th>UTF-8编码方式（二进制）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0000 0000-0000 007F</td>
<td>0xxxxxxx</td>
</tr>
<tr>
<td>0000 0080-0000 07FF</td>
<td>110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>0000 0800-0000 FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>0001 0000-0010 FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>
<p>此外，有一个概念很重要，即UTF-8是单字节码，多字节存储，而非多字节码。这个概念告诉我们它是大小端无关的！这也保证了其在各平台的通用性。</p>
<h1 id="2-UTF-8字符串截取算法"><a href="#2-UTF-8字符串截取算法" class="headerlink" title="2. UTF-8字符串截取算法"></a>2. UTF-8字符串截取算法</h1><p>该算法是从参考文献1看到的，先上代码。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubUTF8String</span><span class="params">(s,n)</span></span></div><div class="line">	<span class="keyword">local</span> dropping = <span class="built_in">string</span>.byte(s, n + <span class="number">1</span>)      <span class="comment">-- 若当截取长度下一位字符是正常字符(&lt;128)或是多字节字符的开始(&gt;192)的话，或是有效字符串的最后一个字符，则直接返回该长度的字符串</span></div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> dropping <span class="keyword">then</span> <span class="keyword">return</span> s <span class="keyword">end</span>           <span class="comment">-- 字符串结尾的情况返回</span></div><div class="line">	<span class="keyword">if</span> dropping &gt;= <span class="number">128</span> <span class="keyword">and</span> dropping &lt; <span class="number">192</span> <span class="keyword">then</span></div><div class="line">		<span class="keyword">return</span> SubUTF8String(s, n - <span class="number">1</span>)          <span class="comment">-- 若不是正常字符也不是多字节码的开始则向前探测</span></div><div class="line">	<span class="keyword">end</span></div><div class="line">	<span class="keyword">return</span> <span class="built_in">string</span>.sub(s, <span class="number">1</span>, n)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>首先该方法也要求我们的输入必须是有效的UTF8字符串（在我们的项目中这是自然满足的），第二个参数n是要截取的长度（字节长度）。</p>
<p>在了解了UTF-8的结构后，对128和192这两个数字就不难理解了。若上面的if语句条件满足，则说明该字节所表示的字符是UTF-8中间的某个字节，需要向前探测。</p>
<p>这个算法的好在于它是一个正确的尾调用（Tail return），虽然其样子与递归十分相似，但它不是递归的。尾调用的英文名称很好的描述了其特征，即对另一个函数的调用是紧跟在return后面的。就我目前的理解来看，尾调用的效率是介于递归和loop之间的，递归的开销主要在维护栈状态和函数调用开销，而尾调用避免了前者，无须担心栈溢出。</p>
<h1 id="3-从UTF-8字符串得到全部有效字符"><a href="#3-从UTF-8字符串得到全部有效字符" class="headerlink" title="3. 从UTF_8字符串得到全部有效字符"></a>3. 从UTF_8字符串得到全部有效字符</h1><p>该算法在上述截取算法的基础上，把字符串中的全部字符分别拿出存到表中，表长即可显字符的个数。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetValidChar</span><span class="params">(str)</span></span></div><div class="line">    <span class="keyword">local</span> chars = &#123;&#125;</div><div class="line">    <span class="keyword">local</span> count = <span class="number">0</span></div><div class="line">    <span class="keyword">local</span> i = <span class="number">1</span></div><div class="line">    <span class="keyword">local</span> j = <span class="number">1</span></div><div class="line">    <span class="keyword">local</span> strlen = <span class="built_in">string</span>.len(str)</div><div class="line">    <span class="keyword">local</span> curlen = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> j &lt;= strlne <span class="keyword">do</span></div><div class="line">        <span class="keyword">local</span> tmplen = <span class="built_in">string</span>.len(SubUTF8String(str, j))</div><div class="line">        <span class="keyword">if</span> tmplen ~= curlen <span class="keyword">then</span></div><div class="line">            count = count + <span class="number">1</span></div><div class="line">            chars[count] = <span class="built_in">string</span>.sub(str, i, j)</div><div class="line">            i = j + <span class="number">1</span></div><div class="line">            j = i</div><div class="line">        <span class="keyword">else</span></div><div class="line">            j = j + <span class="number">1</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> chars</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/zhang429350061/article/details/41825521&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.c
    
    </summary>
    
    
      <category term="Lua" scheme="http://tumi.tech/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>looknfeel简介</title>
    <link href="http://tumi.tech/2016/09/09/introduction-of-looknfeel/"/>
    <id>http://tumi.tech/2016/09/09/introduction-of-looknfeel/</id>
    <published>2016-09-09T05:37:45.000Z</published>
    <updated>2016-09-09T06:27:28.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>参考资料：<a href="http://static.cegui.org.uk/docs/0.7.1/fal_tut1.html" target="_blank" rel="external">http://static.cegui.org.uk/docs/0.7.1/fal_tut1.html</a></p>
</blockquote>
<p>因最近处理一个控件缩放时出了问题，一路从layout看到looknfeel，正好趁此机会了解其机制。</p>
<h1 id="1-标签"><a href="#1-标签" class="headerlink" title="1. 标签"></a>1. 标签</h1><p>looknfeel遵循xml，举一个最简单的示例如下：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version = "1.0" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Falagard</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">WidgetLook</span> <span class="attr">name</span> = <span class="string">"TaharezLook/Button"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ImagerySection</span> <span class="attr">name</span> = <span class="string">"normal_imagery"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ImageryComponent</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Area</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span> = <span class="string">"LeftEdge"</span>&gt;</span><span class="tag">&lt;<span class="name">AbsoluteDim</span> <span class="attr">value</span>= <span class="string">"0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span> = <span class="string">"TopEdge"</span>&gt;</span><span class="tag">&lt;<span class="name">AbsoluteDim</span> <span class="attr">value</span> = <span class="string">"0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span> = <span class="string">"Width"</span>&gt;</span><span class="tag">&lt;<span class="name">UnifiedDim</span> <span class="attr">scale</span> = <span class="string">"1.0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span> = <span class="string">"Height"</span>&gt;</span><span class="tag">&lt;<span class="name">UnifiedDim</span> <span class="attr">scale</span> = <span class="string">"1.0"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">Area</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Image</span> <span class="attr">imageset</span> = <span class="string">"TaharezLook"</span> <span class="attr">image</span> = <span class="string">"ButtonNormal"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">VertFormat</span> <span class="attr">type</span> = <span class="string">"Stretched"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">ImageryComponent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ImagerySection</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ImagerySection</span> <span class="attr">name</span> = <span class="string">"label"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">TextComponent</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Area</span>&gt;</span></div><div class="line"></div><div class="line">				<span class="tag">&lt;/<span class="name">Area</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">TextComponent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ImagerySection</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">StateImagery</span> <span class="attr">name</span> = <span class="string">"Normal"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">Layer</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Section</span> <span class="attr">section</span> = <span class="string">"normal_imagery"</span>/&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Section</span> <span class="attr">section</span> = <span class="string">"label"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">Layer</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">StateImagery</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">WidgetLook</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Falagard</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从上面的示例可以看出大概的层级结构，文件定义了一个Button，两种结构（或者说控件，但不太恰当）和一种状态，并使这种状态包含了这两种结构。<br>对于”normal_imgery”这种结构，需要指出他的区域Area，图片和对齐方式。整个looknfeel最有趣的部分在于Area的设置，即坐标的指定。</p>
<h1 id="2-坐标系统"><a href="#2-坐标系统" class="headerlink" title="2. 坐标系统"></a>2. 坐标系统</h1><p>一个控件区域的指定通过两种要素完成，一是坐标类型 Dim type：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"LeftEdge", "TopEdge", "RightEdge", "BottomEdge", "Width", "Height"</div></pre></td></tr></table></figure>
<p>二是坐标数值：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"AbsoluteDim", "UnifiedDim", "ImageDim"</div></pre></td></tr></table></figure>
<p>此外，还可以通过<strong>算术操作符</strong>指定两个坐标值的算术操作结果，甚至完成嵌套的复杂计算，但是其计算优先级只能是innermost，即由内至外进行计算。下面用官方文档中的一个示例来演示： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Dim</span> <span class="attr">type</span>=<span class="string">"RightEdge"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">UnifiedDim</span> <span class="attr">scale</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"Width"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">DimOperator</span> <span class="attr">op</span>=<span class="string">"Subtract"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ImageDim</span></span></div><div class="line">				<span class="attr">imageset</span>=<span class="string">"TaharezLook"</span> <span class="attr">image</span>=<span class="string">"ButtonRightNormal"</span> <span class="attr">dimension</span>=<span class="string">"Width"</span></div><div class="line">			/&gt;</div><div class="line">		<span class="tag">&lt;/<span class="name">DimOperator</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">UnifiedDim</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">Dim</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该例的功能是在已经为一个大控件设置了左右两个button后，再把第三个button填补到两个按钮中间的空白区域，其LeftEdge的设置可直接使用leftButton的rightEdge，即Width,而该middleButton的rightEdge设置就需要计算出来了。计算的两个操作数分别是整个大空间的Width和rightButton的Width。</p>
<h1 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h1><p>虽说是把looknfeel的运作原理大概看了下，但其实在实际工作中，尤其是对于已经开发成型的游戏，改动它的可能性太小，所以下一步应补充了解对应的C++代码是如何与其协作的，或者说C++代码是如何利用这些配置文件来达到对控件的更灵活的控制的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;http://static.cegui.org.uk/docs/0.7.1/fal_tut1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://static.cegui.org.uk
    
    </summary>
    
    
      <category term="CEGUI" scheme="http://tumi.tech/tags/CEGUI/"/>
    
  </entry>
  
  <entry>
    <title>Say Hexo</title>
    <link href="http://tumi.tech/2016/07/26/sayhello/"/>
    <id>http://tumi.tech/2016/07/26/sayhello/</id>
    <published>2016-07-26T01:10:41.000Z</published>
    <updated>2016-07-26T02:17:58.267Z</updated>
    
    <content type="html"><![CDATA[<p>经过一番折腾，终于在Hexo安家了。总的来说，它的配置和使用比Octopress要方便一些，且目前来讲Nodejs应该比Ruby圈子更火一些吧，虽然这两个都不会用哈哈。  </p>
<p>目前来看博客系统很强大，主题丰富，对md的支持也使得版式可控性强，但还要考虑图床的问题，不过暂时还用不到，到时再说。</p>
<p>OK, Stay calm and carry on.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一番折腾，终于在Hexo安家了。总的来说，它的配置和使用比Octopress要方便一些，且目前来讲Nodejs应该比Ruby圈子更火一些吧，虽然这两个都不会用哈哈。  &lt;/p&gt;
&lt;p&gt;目前来看博客系统很强大，主题丰富，对md的支持也使得版式可控性强，但还要考虑图床的问题
    
    </summary>
    
    
      <category term="Others" scheme="http://tumi.tech/tags/Others/"/>
    
  </entry>
  
</feed>
